import {vulnerabilityEncryptionSchema} from "../schema/vulnerability-encryption-schema"
import {defaultClientInfo, roundForTime, timelockEncrypt} from "tlock-js"
import {fileAsBuffer} from "./file-utils"

export async function encryptVulnerabilityReport(form: unknown): Promise<string> {
    const input = await vulnerabilityEncryptionSchema.validate(form)
    if (input.files && input.files.length > 1) {
        throw Error("Right now only a single file is supported! Try using an archive such as tar or zip")
    }

    const file = input.files?.item(0)
    let fileBase64 = null
    if (file) {
        const fileBuf = await fileAsBuffer(file)
        fileBase64 = fileBuf.toString("base64")
    }

    const plaintext = JSON.stringify({
        title: input.title,
        description: input.description,
        cve: input.cve,
        file: {
            name: file.name,
            content: fileBase64
        }
    })

    const roundNumber = roundForTime(input.decryptionTime, defaultClientInfo)
    return await timelockEncrypt(roundNumber, Buffer.from(plaintext))
}
