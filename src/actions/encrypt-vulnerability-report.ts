import {vulnerabilityEncryptionSchema} from "../schema/vulnerability-encryption-schema"
import {mainnetClient, roundAt, timelockEncrypt} from "tlock-js"
import {MAINNET_CHAIN_INFO} from "tlock-js/drand/defaults"
import {fileAsBuffer} from "./file-utils"

export async function encryptVulnerabilityReport(form: unknown): Promise<string> {
    const input = await vulnerabilityEncryptionSchema.validate(form)
    if (input.files && input.files.length > 1) {
        throw Error("Right now only a single file is supported!")
    }

    const inputFile = input.files?.item(0)
    let file = null
    if (inputFile) {
        const fileBuf = await fileAsBuffer(inputFile)
        const fileBase64 = fileBuf.toString("base64")

        file = {
            name: inputFile.name,
            content: fileBase64
        }
    }

    const plaintext = JSON.stringify({
        title: input.title,
        description: input.description,
        cve: input.cve,
        file
    })

    const roundNumber = roundAt(input.decryptionTime, MAINNET_CHAIN_INFO)
    return await timelockEncrypt(roundNumber, Buffer.from(plaintext), mainnetClient())
}
